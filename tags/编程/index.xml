<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编程 on 坚韧，平和</title>
    <link>https://felix3210.github.io/tags/%E7%BC%96%E7%A8%8B/</link>
    <description>Recent content in 编程 on 坚韧，平和</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <managingEditor>wi1024u@gmail.com (felix)</managingEditor>
    <webMaster>wi1024u@gmail.com (felix)</webMaster>
    <copyright>(c) 2017 wi1024.com</copyright>
    <lastBuildDate>Wed, 31 May 2017 09:44:23 +0800</lastBuildDate>
    
	<atom:link href="https://felix3210.github.io/tags/%E7%BC%96%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>一个老码农的技术理想</title>
      <link>https://felix3210.github.io/2017/05/31/%E4%B8%80%E4%B8%AA%E8%80%81%E7%A0%81%E5%86%9C%E7%9A%84%E6%8A%80%E6%9C%AF%E7%90%86%E6%83%B3/</link>
      <pubDate>Wed, 31 May 2017 09:44:23 +0800</pubDate>
      <author>wi1024u@gmail.com (felix)</author>
      <guid>https://felix3210.github.io/2017/05/31/%E4%B8%80%E4%B8%AA%E8%80%81%E7%A0%81%E5%86%9C%E7%9A%84%E6%8A%80%E6%9C%AF%E7%90%86%E6%83%B3/</guid>
      <description>小时候，老师问我，你的理想是什么？我不假思索说是工程师，于是长大之后果然成了工程师。 工作这么多年，一直在思考工程师这三个字的意义，终于有一天恍然大悟，原来就是：用技术手段改进世界。
那么，在软件方面，目前的世界有哪些问题需要解决呢？有这么一些问题可以思考：
现在整个世界的信息化程度是偏高还是偏低？
程序员的人数够用吗？
软件行业的生产力是偏高还是偏低？
大部分软件系统都可靠吗？
我想说说自己对这几个问题的理解。
虽然现在我们的生活与十年前相比，已经发生了巨大变化，比如智能手持设备已经非常普及，可穿戴设备也在蓬勃发展。十年前我们用手机收发短信或者邮件，浏览非常简单而老土的wap页面，但现在，绝大部分人的手机已经取代了电脑，成为日常生活中不可缺少的工具。
我们用手机交流，购物，欣赏影视，阅读书籍，玩各类游戏，尤其是飞速发展的移动购物和支付体系，使得我们能在任意场合购买心仪的物品，订购旅游服务和宾馆，叫快餐，打车等等，生活非常美好，那么，整个世界的信息化程度处于什么级别呢？
我觉得，才刚刚相当于小学二年级，整个世界的信息化程度仍然严重偏低。从现在算起，往前10年，往后10年，这20年时间中，面向个人的信息化服务处于高速发展期，这个领域非常吸引眼球，因为它与每个人的生活息息相关。可是，另外有一些领域，却非常需要发展，那就是传统行业的信息化。
之前有不少传统行业，进行了一定程度的信息化，但这个信息化仅仅能满足自身运作的基本要求，当它与整个社会的潮流相对接的时候，就显得非常落后，迟缓。比如说在网购这个大体系中，普通用户所能看到的是商品展示，比价，下单的过程，但背后的核心环节却是配货与物流。
我还在上学的时候，有老师这么说过，现在计算机行业非常火热，很可能要饱和了，你们不一定非要从事这方面的工作。现在回头看这句话，觉得很有趣，人真的很难有眼光看到未来。去年我入职苏宁培训的时候，孙为民副总讲了当年一个决策失误的例子。90年代末，公司统计发现全国空调的年销售量达到数百万台，觉得很可怕，这个行业可能要饱和，估计要再想办法拓展别的商品经营了，但现在，全国空调的保有量为七亿台，即使完全没有新增，十年换一轮，每年也卖得出去七千万台，当年凭什么说这就饱和了？
所以我现在看程序员的状况，仍然是供不应求，尤其是高端程序员，十分抢手。这个问题的背景就是全社会的信息化进程在加速，之前的程序员人数远远跟不上需求量。
那么，如何解决这个问题呢？一方面是继续培训，促使更多新人来到这个行业，并且认真做下去，另外还有一些别的手段需要考虑。
我想追问一个问题：世界上懂业务的人多，还是懂技术的人多？很明显，懂业务的人要多很多，什么叫业务？其实就是行业常识，生活经验。
比如说，一个有经验的仓库保管员，可能文化程度不高，理解不了软件的运行原理之类，但一定对产品出库入库的流程非常熟悉，包括各种审批过程和异常状况，但这些，程序员是不懂的。那如果要促进这个领域的信息化，必然要在两者之间寻找一个结合点，程序员可以学业务，业务人员也可以尝试参与软件研发过程，目前来说，都是前者比较多，因为程序员相对来说还是比较年轻，学东西快些。但从整体社会效益来说，这其实是不利的，因为程序员是更稀缺资源，而传统业务人员非常多。
之前见过一个问题：如何让业务人员更好地参与软件研发过程。这个问题的根本解决方法是DSL（Domain Specific Language），核心解决方案是二次开发平台。
什么是DSL和二次开发平台呢，这两个词听上去很高端，但其实大家有很常用的东西就属于这个范畴，比如Excel，它提供了各种各样的公式，还有VBA，使用这些东西的人绝大部分不是软件行业的，Excel就是一种很成功的二次开发平台，公式和VBA就可以算DSL了。
很多时候这些东西还不够直观，我们可以看到一些图形化的编程语言，比如Scratch，现在很多小学生的兴趣班就会学，这些东西相对学起来就比较容易了，我们也可以做一些类似的抽象，以图形化的方式让业务人员能够参与，比如流程配置等等。图形化的东西，是最适合非技术人员理解的。
所以，要促进社会的信息化程度，最好是能够想办法把各行业的业务人员都拖进来一起搞。具体的分工大致是：技术人员和业务人员一起定义DSL，技术人员负责DSL的底层平台实现，业务人员负责使用它来构建业务模型和业务流程，甚至业务界面。
那么，软件行业的生产力是偏高还是偏低呢？我认为严重偏低。什么叫严重偏低？如果以机械力量的变革来对比，软件行业目前的生产力水平处于蒸汽机发明之前。也就是说，生产力远远没有被解放，大家做的大部分东西将来是会被机械化的，不再需要这么多人来做这么重复的劳动。可能很多人会对这段话不满，怎么就重复劳动了，你说说我做的什么是可以被机器替代的？
换个角度看，为什么几乎所有外行都觉得软件贵呢？因为人力成本太高了，他们觉得，做出这么多东西，应该是不需要这么多时间。为什么双方的反差这么大呢？
我觉得其中的关键点在于绝大部分工作的抽象程度严重不足，另外有很大一部分效率损失在编程平台或编程语言的不完善，比如Web前端。
从第一代到第四代编程语言，每一代都是损失一定运行效率，而大幅提升编写效率。随着硬件技术的发展，软件编程必然越来越粗放，大的趋势是不特别重视细节效率，只要没有数量级的性能损耗。
所以我们可以预期，会有越来越多的人使用一些运行效率相对不怎么高的语言或框架，只是为了提高单位时间的生产力。从老板们角度想，也会明白，提升运行机器的性能，要比多雇几个程序员便宜多了。因此，从整体趋势看，追求细节性能的程序员们恐怕会离自己的理想越来越远了，除非是在某些特定领域。
那么，绝大部分软件系统都可靠吗？我换一句话来问：各位程序员朋友，如果你们住的房子质量跟你们正在做的软件一样，你敢住吗？感觉大家都在笑，笑是什么意思，我们都懂的。
那为什么软件系统的质量不容易高呢？我觉得主要原因是流程不完善。那为什么不完善？需求容易变。为什么容易变？是因为不论程序员自己，还是需求方，其实潜意识都认为自己做的东西是变更成本较低的。
试想一下，为什么没人在盖高楼盖一半变更需求？为什么没人修大桥修一半变更需求？甚至做衣服做一半的时候变更需求，理发到一半变更需求，都会被人认为是不讲理。但是在软件领域，好像这倒成了普遍现象。
因为整个软件系统的实现，都是虚拟的，看不见摸不着，并不消耗什么物料，所以从这个角度想，变起来当然是容易的。但软件系统的架构，其实也跟实体的没本质区别，变更时候要考虑很多关联因素，并不是就那么孤立的看一小块地方，当然，也会有一些不影响全局的变更。打个比方说，如果你在盖房子盖到一半，那变更外墙颜色肯定是要比变更窗户大小容易的。要是想变得太多，估计只好拆了重来。
我见过不少公司是通过加强测试的方式来试图控制质量，但个人觉得这种方式不划算，而且收效不高。要想很好地应对需求变更，很重要的一点就是不要有这个软件一定不会改的想法，然后，从架构上做拆分，隔离，组件化等等，力争做到即使要改，也只改某一块的内部，不影响别的地方。
很多软件公司，一方面不注重架构的设计与宣贯，导致变更的时候问题多多，程序员也不能很好领会架构意图，一方面忽视整个过程中对架构的管控，认为架构只是最初那张静态图。
任何一种架构方案，都需要一个良好的管控机制。没有哪个盖大楼的只认真管设计图纸，不控制施工过程。架构其实是跟施工过程严格相关的，架构并不是一张扁平的图，而是一个立体的东西，作为整个系统工程的骨架。如果能在开发的时候看到这个骨架逐渐建立，血肉充盈的过程，对整个系统的成功把握一定会大
得多，这也就是开发过程中架构管控的理念，具体实现要依赖于不同场景。
所以，将来的软件开发方案，一定是会朝着几个方向发展：
高生产力，单位时间生产效率更高，普通人员也可以参与
高可控性，整个生产过程更加完备可靠
有时候看现在的小孩子，会觉得他们很幸福，因为等他们这代长大，就不需要像我们现在这样编写程序了，那时候，编程已经成了一种令人习以为常的通用技能，就像现在的人用Office软件一样，所谓的编程，很可能已经不需要敲代码了，而是图形化，设置几个参数就完事了。</description>
    </item>
    
    <item>
      <title>python学习笔记</title>
      <link>https://felix3210.github.io/2017/03/23/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 23 Mar 2017 17:27:26 +0800</pubDate>
      <author>wi1024u@gmail.com (felix)</author>
      <guid>https://felix3210.github.io/2017/03/23/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description> 数据结构  列表（list） 元组（tuple） 字典（dist） SET  函数参数类型  默认参数 可变参数 关键字参数 尾递归（尾递归是指，在函数返回的时候，调用自身本身，并且，return语句不能包含表达式）  高级语法  切片（slice） 迭代（Iteration、enumerate） 列表生成（range &amp;hellip; ） 生成器（generator）  高阶函数 (把函数作为参数传入，这样的函数称为高阶函数)  map/reduce filter sorted 函数返回值 闭包 （返回函数不要引用任何循环变量，或者后续会发生变化的变量） 匿名函数 Decorator（装饰器） functools（偏函数partial）  </description>
    </item>
    
    <item>
      <title>关于程序员职业规划的思考</title>
      <link>https://felix3210.github.io/2017/03/15/%E5%85%B3%E4%BA%8E%E7%A8%8B%E5%BA%8F%E5%91%98%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92%E7%9A%84%E6%80%9D%E8%80%83/</link>
      <pubDate>Wed, 15 Mar 2017 10:21:09 +0800</pubDate>
      <author>wi1024u@gmail.com (felix)</author>
      <guid>https://felix3210.github.io/2017/03/15/%E5%85%B3%E4%BA%8E%E7%A8%8B%E5%BA%8F%E5%91%98%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92%E7%9A%84%E6%80%9D%E8%80%83/</guid>
      <description> 第一阶段：三年 我认为三年对于程序员来说是第一个门槛，这个阶段将会淘汰掉一批不适合写代码的人。这一阶段，我们走出校园，迈入社会，成为一名程序员，正式从书本 上的内容迈向真正的企业级开发。我们知道如何团队协作、如何使用项目管理工具、项目版本如何控制、我们写的代码如何测试如何在线上运行等等，积累了一定的 开发经验，也对代码有了一定深入的认识，是一个比较纯粹的Coder的阶段。
第二阶段：五年 五年又是区分程序员的第二个门槛。有些人在三年里，除了完成工作，在空余时间基本不会研究别的东西，这些人永远就是个Coder，年纪大一些势必被 更年轻的人给顶替；有些人在三年里，除了写代码之外，还热衷于研究各种技术实现细节、看了N多好书、写一些博客、在Github上分享技术，这些人在五年 后必然具备在技术上独当一面的能力并且清楚自己未来的发展方向，从一个Coder逐步走向系统分析师或是架构师，成为项目组中不可或缺的人物。
第三阶段：十年 十年又是另一个门槛了，转行或是继续做一名程序员就在这个节点上。如果在前几年就抱定不转行的思路并且为之努力的话，那么在十年的这个节点上，有些 人必然成长为一名对行业有着深入认识、对技术有着深入认识、能从零开始对一个产品进行分析的程序员，这样的人在公司基本担任的都是CTO、技术专家、首席 架构师等最关键的职位，这对于自己绝对是一件荣耀的事，当然老板在经济上也绝不会亏待你。
 第一部分总结一下，我认为，随着你工作年限的增长、对生活对生命认识的深入，应当不断思考三个问题： 我到底适不适合当一名程序员？ 我到底应不应该一辈子以程序员为职业？ 我对编程到底持有的是一种什么样的态度，是够用就好呢还是不断研究？ 最终，明确自己的职业规划，对自己的规划负责并为之努力。  </description>
    </item>
    
  </channel>
</rss>